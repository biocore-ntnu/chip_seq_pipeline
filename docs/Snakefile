"""
Should be able to generate the docs for you.
  - Includes graphs, i.e. must download data and run pipeline
  - Must use docstring to describe each main target
  - Other data must be kept elsewhere
"""

from snakemake.shell import shell

shell.executable("bash")

configfile: "example/config.yaml"

# subworkflow pipeline:
#     snakefile: "../Snakefile"
#     workdir: ".."

include: "../Snakefile"

import re

prefix = config["prefix"]

rule all:
    input:
        "docs/{target}.rst".format(target="pca")


def fetch_rules(snakefile):
    "Have code that collects targets from the main Snakefile first and their comments and their output paths"

    rules = open(snakefile).read()#.split("rule ")[1:]

    regex_matches = re.findall('rule (\w+):\s+"""(.*?)""".*?expand\(["\'](.*?)["\'],.*?\)', rules, flags=re.DOTALL | re.MULTILINE)

    matches = {target_name: (re.sub("\n\s+", " ", docstring), outpath) for target_name, docstring, outpath in regex_matches}

    return matches


targets = fetch_rules("Snakefile")


template = """{name}

{main_description}

Targets
-------

{target_descriptions}

Workflow to create targets
--------------------------

{workflow_descriptions}
"""


rule rulegraphs:
    output:
        "docs/img/rulegraphs/{target}.pdf"
    shell:
        "snakemake -n --configfile example/config.yaml --rulegraph {wildcards.target} | dot -Tpdf > {output[0]}"


def create_target_description(target, figure, docstring, output_path):

    target_header = target + "\n" + '"' * len(target)

    example_output = """.. figure:: {figure}
:scale: 45%""".format(**locals())

    target_description = """{target_header}

{docstring}

{example_output}

Output path = `{output_path}`""".format(**locals())

    return target_description


def create_target_descriptions(targets, output_dict):

    target_descriptions = []

    for target, (docstring, output_path) in targets.items():

        figure = output_dict[target]

        target_description = create_target_description(target, figure, docstring, output_path)
        target_descriptions.append(target_description)

    return "\n\n".join(target_descriptions)


def create_workflow_description(target, figure):

    target_header = target + "\n" + '"' * len(target)

    return """{target_header}

.. figure:: {figure}
:scale: 45%""".format(**vars())


def create_workflow_descriptions(targets, rulegraphs):

    workflow_descriptions = []
    for target in targets:

        figure = rulegraphs[target]

        workflow_description = create_workflow_description(target, figure)

        workflow_descriptions.append(workflow_description)

    return "\n\n".join(workflow_descriptions)


rulegraphs_pca = {k: "docs/img/rulegraphs/{target}.svg".format(target=k) for k in "pca_chip_vs_merged_input pca_individual pca_limma".split()}
rule docs_pca:
    input:
        pca_chip_vs_merged_input = expand("{prefix}/data/plot_pca/pca_chip_vs_merged_input.pdf", prefix=prefix),
        pca_individual = expand("{prefix}/data/plot_pca/pca_individual.pdf", prefix=prefix),
        pca_limma = expand("{prefix}/data/plot_pca/{caller}.pdf",
                           prefix=prefix, caller=config["peak_callers"]),
        rulegraphs = rulegraphs_pca.values()
    output:
        doc = "docs/pca.rst",
        pca_chip_vs_merged_input = expand("docs/img/pca/pca_chip_vs_merged_input.pdf", prefix=prefix),
        pca_individual = expand("docs/img/pca/pca_individual.pdf", prefix=prefix),
        pca_limma = expand("docs/img/pca/{caller}.pdf",
                           prefix=prefix, caller=config["peak_callers"])
    run:
        name = "PCA"
        main_description = "bincs can create three types of PCA for you."

        input_dict = dict(input)
        output_dict = dict(output)

        target_descriptions = create_target_descriptions(targets, output_dict)
        workflow_descriptions = create_workflow_descriptions(targets, rulegraphs_pca)

        print(template.format(**locals()))


# rule docs_config:
#     input:
#         "utils/"
