from utils.file_getters import correct_cs_files


rule run_epic:
    input:
        chip = lambda w: correct_cs_files(ss, w.prefix, "chip", "bed", config, w.group),
        input = lambda w: correct_cs_files(ss, w.prefix, "input", "bed", config, w.group)
    output:
        outfile = "{prefix}/data/peaks/epic/{group}.csv",
        bed = "{prefix}/data/peaks/epic/{group}.bed",
        matrix = "{prefix}/data/epic/{group}.matrix.gz",
        bigwig_folder = "{prefix}/data/epic/{group}_bigwigs/"
    params:
        paired_end = "--paired-end" if config["paired_end"] else "",
        fragment_size = lambda w: config["fragment_length"] if config["fragment_length"] else frag_sizes[w.group]
    threads: 48
    resources:
        instances = 1
    shell:
        "epic -cpu {threads} -g {config[epic_gap]} -w "
        "{config[epic_window_size]} -gn {config[genome]} "
        "{params.paired_end} --fragment-size {params.fragment_size} "
        "-b {output.bed} -t {input.chip} -c {input.input} "
        "-sm {output.matrix} -bw {output.bigwig_folder} "
        "> {output.outfile}"


rule run_epic_loo:
    input:
        chip = lambda w: correct_cs_files(loo_ss, w.prefix, "chip", "bed", config, w.group),
        input = lambda w: correct_cs_files(loo_ss, w.prefix, "input", "bed", config, w.group)
    output:
        outfile = "{prefix}/data/peaks/epic/loo/{group}.csv",
        bed = "{prefix}/data/peaks/epic/loo/{group}.bed",
        matrix = "{prefix}/data/epic/loo/{group}.matrix.gz",
    params:
        paired_end = "--paired-end" if config["paired_end"] else ""
    conda:
        "../../envs/global.yaml"
    threads: 48
    resources:
        instances = 1
    shell:
        "epic -cpu {threads} -g {config[epic_gap]} -w "
        "{config[epic_window_size]} -gn {config[genome]} "
        "{params.paired_end} "
        "-b {output.bed} -t {input.chip} -c {input.input} "
        "-sm {output.matrix} "
        "> {output.outfile}"
