rule gff_to_bed:
    input:
        "{prefix}/data/annotation/annotation.gff3"
    output:
        "{prefix}/data/annotation/{region_type}/annotation.bed"
    run:
        if wildcards.region_type != "internal_exon":
            shell(r"gff2bed < {input[0]} | grep -E '\b{wildcards.region_type}\b' "
                  "| cut -f 1-6 > {output[0]}")
        else:
            shell(r"gff2bed < {input[0]} | grep -E '\bexon\b' "
                  "| cut -f 1-6 > {output[0]}.tmp")
            shell("python scripts/compute_internal_exons.py {output[0]}.tmp > {output[0]}")
            shell("rm {output[0]}.tmp")



rule remove_duplicate_tss:
    input:
        "{prefix}/data/annotation/{region_type}/annotation.bed"
    output:
        "{prefix}/data/compute_tss/{region_type}/annotation_no_duplicate_tss.bed"
    run:
        import pandas as pd

        colnames = "Chromosome Start End Name Score Strand".split()

        df = pd.read_table(input[0], header=None,
                           names="Chromosome Start End Name Score Strand".split())

        indexes_to_keep = []
        for _, cdf in df.groupby("Chromosome"):
            forward = cdf.loc[cdf.Strand == "+"]
            reverse = cdf.loc[cdf.Strand == "-"]

            new_cdf = pd.concat([forward.Start, reverse.End])
            df_ix = new_cdf.drop_duplicates()
            indexes_to_keep.append(df_ix)

        ix = pd.concat(indexes_to_keep).index

        df.ix[ix].to_csv(output[0], sep="\t", index=False, header=False)
