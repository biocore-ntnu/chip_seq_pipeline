import gzip, json, io

def new_labels(w, input):

    header = gzip.open(input.matrix).readline().decode()[1:]
    labels = json.load(io.StringIO(header))["sample_labels"]

    if w.chip == "log2ratio":
        labels = [l.replace("sample_", "").replace("_vs_merged_input", "") for l in labels]

    return " ".join(labels)


def region_type_info(region_type):
    if "gene" in region_type:
        return "Region type: {} (All regions scaled to be {} bp)".format(region_type, config["tss_distance_gene"])
    else:
        return "Region type: {} (All regions scaled to be {} bp)".format(region_type, config["tss_distance_other"])

def new_header(w):

    header = []
    if w.chip == "log2ratio":
        header.append("ChIP vs merged input files.")
    else:
        header.append(w.chip)

    header.append("Group: " + w.group)

    header.append(region_type_info(w.region_type))

    return " ".join(header)


def new_start_label(w):
    return "TSS" if "gene" in w.region_type else "5'"

def new_end_label(w):
    return "TES" if "gene" in w.region_type else "3'"

ruleorder: find_heatmap_sort_order > create_heatmap


rule find_heatmap_sort_order:
    input:
        matrix = "{{prefix}}/data/compute_matrix/{{region_type}}/{{chip}}/scale_regions/sort_order_matrix_{group}.mat.gz".format(group=first_group),
    output:
        graph = "{{prefix}}/data/heatmap/{{region_type}}/{{chip}}/scale_regions/{group}_{{region_type}}.png".format(group=first_group),
        sort_order = "{{prefix}}/data/heatmap/{{region_type}}/{{chip}}/scale_regions/{group}_sort_order.bed".format(group=first_group)
    resources:
        instances = 1
    priority: 100
    shell:
        "plotHeatmap -m {input[0]} --sortRegions descend -T '{first_group} (scale-regions)' -out {output.graph} --outFileSortedRegions {output.sort_order}"


rule create_heatmap:
    input:
        matrix = "{prefix}/data/compute_matrix/{region_type}/{chip}/scale_regions/{group}.mat.gz",
    output:
        graph = "{prefix}/data/heatmap/{region_type}/{chip}/scale_regions/{chip}_{group}_{region_type}.png"
    resources:
        instances = 1
    priority: 100
    params:
        header = new_header,
        start_label = new_start_label,
        end_label = new_end_label
    run:
        labels = new_labels(wildcards, input) # Not done in params since it
                                              # requires the input file to read
                                              # the labels
        shell("plotHeatmap -T '{params.header}' --samplesLabel {labels} --startLabel \"{params.start_label}\" --endLabel \"{params.end_label}\" -m {input.matrix} --sortRegions no -out {output.graph}")


ruleorder: find_group_vs_group_heatmap_sort_order > create_group_vs_group_heatmap


def new_group_vs_group_header(w):

    header = ["ChIP {group1} vs {group2}. First the log2ratio of each group against the input was taken, then the log2ratio of these groups vs each other."]
    header.append(region_type_info(w.region_type))

    return " ".join(header)


rule find_group_vs_group_heatmap_sort_order:
    input:
        matrix = "{{prefix}}/data/compute_matrix/{{region_type}}/{{chip}}/scale_regions/group_vs_group/sort_order_matrix_{group1}_vs_{group2}.mat.gz".format(group1=first_group, group2=more_than_one_group)
    output:
        graph = temp("{{prefix}}/data/heatmap/{{region_type}}/{{chip}}/scale_regions/group_vs_group/{group1}_vs_{group2}.png".format(group1=first_group, group2=more_than_one_group)),
        sort_order = "{{prefix}}/data/heatmap/{{region_type}}/{{chip}}/scale_regions/group_vs_group/{group1}_vs_{group2}_sort_order.bed".format(group1=first_group, group2=more_than_one_group)
    resources:
        instances = 1
    priority: 100
    # params:
    shell:
        "plotHeatmap -m {input[0]} --sortRegions descend  -out {output.graph} --outFileSortedRegions {output.sort_order}"


rule create_group_vs_group_heatmap:
    input:
        matrix = "{prefix}/data/compute_matrix/{region_type}/{chip}/scale_regions/group_vs_group/{group1}_vs_{group2}.mat.gz",
    output:
        graph = "{prefix}/data/heatmap/{region_type}/{chip}/scale_regions/group_vs_group/{group1}_vs_{group2}_{region_type}.png"
    params:
        title = new_group_vs_group_header,
        start_label = new_start_label,
        end_label = new_end_label
    resources:
        instances = 1
    priority: 100
    shell:
        "plotHeatmap --startLabel \"{params.start_label}\" --endLabel \"{params.end_label}\" -T '{params.title}' -m {input.matrix} --sortRegions no -out {output.graph}"
