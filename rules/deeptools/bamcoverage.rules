bamcoverage_cmd = "bamCoverage --extendReads {params.shift} --centerReads -p {threads} --normalizeUsing RPKM -b {input.bam} -o {output[0]}"

def get_fragsize(w):

    sample, time, mod = w.sample.split("_")
    return int(frag_sizes[(frag_sizes.Sample == sample) & (frag_sizes.Time == time)].Size.iloc[0] / 4)


rule bamcoverage:
    input:
        bam = "{prefix}/data/bam/{sample}.sorted.bam",
        index = "{prefix}/data/bam/{sample}.sorted.bam.bai"
    output:
        "{prefix}/data/bamcoverage/{sample}.bw"
    params:
        shift = get_fragsize # lambda w: int(frag_sizes[(frag_sizes.Sample == w.sample) & (frag_sizes.Time == w.time)].Size.iloc[0] / 2)
        # fragment_size = lambda w: config["fragment_length"] if config["fragment_length"] else int(frag_sizes[ss[ss.Sample == w.sample].Group.iloc[0]] / 2)
    threads:
        48
    shell:
        bamcoverage_cmd


def get_fragsize(w):

    # print(w.group)
    mod, time = w.group.split("_")
    # print(frag_sizes)
    res = frag_sizes[(frag_sizes.Time == time)].Size

    return int(sum(res)/(2 * 4))



rule bamcoverage_merged_group:
    input:
        bam = "{prefix}/data/bamcompare/{group}_{chip}.sorted.bam",
        index = "{prefix}/data/bamcompare/{group}_{chip}.sorted.bam.bai"
    output:
        "{prefix}/data/bamcoverage/merged_{group}_{chip}.bw"
    params:
        shift = get_fragsize
    threads:
        48
    shell:
        bamcoverage_cmd
