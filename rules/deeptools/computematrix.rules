def group_bigwigs(w):

    df = sample_sheet

    if w.chip == "log2ratio":
        names = sorted(list(set(df.loc[(df.Group == w.group) & (df.ChIP == "ChIP")].Name)))
        return expand("{prefix}/data/bigwigcompare/sample_{sample}_vs_merged_input.bw", sample=names, prefix=w.prefix)

    elif w.chip == "input":

        names = sorted(list(set(df.loc[(df.Group == w.group) & (df.ChIP == "Input")].Name)))
        return expand("{prefix}/data/bamcoverage/{sample}.bw", sample=names, prefix=w.prefix)

    elif w.chip == "chip":

        names = sorted(list(set(df.loc[(df.Group == w.group) & (df.ChIP == "ChIP")].Name)))
        return expand("{prefix}/data/bamcoverage/{sample}.bw", sample=names, prefix=w.prefix)


def options(w):
    opts = []
    if w.scaled == "scale_regions":
        opts.append("--regionBodyLength 5000")
    elif w.scaled.lower() == "tss":
        opts.append("--referencePoint TSS")
    else:
        opts.append("--referencePoint TES")

    region_starts = ("--beforeRegionStartLength {dist} "
                     "--afterRegionStartLength {dist}")
    region_labels = (r"--startLabel 3\' "
                     r"--endLabel 5\'")

    if "gene" in w.region_type:
        dist = config["tss_distance_gene"]
        opts.append(region_starts.format(dist=dist))
    else:
        dist = config["tss_distance_other"]
        opts.append(region_starts.format(dist=dist))
        opts.append(region_labels)

    return " ".join(opts)


def get_bed_regions(w):

    annotation_exists = config.get("annotation_gff3", "")

    custom_regions = config["custom_regions"] or []

    if w.region_type not in custom_regions and annotation_exists:
        return "{prefix}/data/compute_tss/{region_type}/annotation_no_duplicate_tss.bed".format(region_type=w.region_type, prefix=w.prefix)
    elif w.region_type not in custom_regions:
        return "{prefix}/data/annotation/refgene/{region_type}.bed".format(**w)
    else:
        custom_regions = config["custom_regions"][w.region_type]
        return custom_regions


#############################
# samples alone or vs input #
#############################

computematrix_cmd = ("computeMatrix {params.subcommand} -p {threads}  "
                     "{params.options} "
                     "-R {input.bed} -S {input.bigwig} -out {output.matrix}")

sort_order_matrix = "{prefix}/data/compute_matrix/{region_type}/{chip}/{scaled}/sort_order_matrix_{group}.mat.gz"
rule compute_sort_order_matrix:
    input:
        bigwig = group_bigwigs,
        bed = get_bed_regions
    output:
        matrix = sort_order_matrix
    threads: 48
    params:
        subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
        options = options
    shell:
        computematrix_cmd


rule compute_matrix:
    input:
        bigwig = group_bigwigs,
        # the bed decides sort order
        bed = "{{prefix}}/data/heatmap/{{region_type}}/{{chip}}/scale_regions/{group}_sort_order.bed".format(group=first_group)
    output:
        matrix = "{prefix}/data/compute_matrix/{region_type}/{chip}/{scaled}/{group}.mat.gz"
    threads: 48
    params:
        subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
        options = options,
        sort_order_matrix = sort_order_matrix
    run:
        # if the sort order matrix exists, avoid recomputation
        # doing it this way to avoid 1) DAG hacks (ruleorder etc) 2) recomputation (expensive!)
        if wildcards.group == first_group:
            sort_order_matrix = params.sort_order_matrix.format(**wildcards)
            shell("cp {sort_order_matrix} {output.matrix}")
        else:
            shell(computematrix_cmd)


#############################
# input-norm group vs group #
#############################

if more_than_one_group:

    sort_order_matrix_group_vs_group = "{prefix}/data/compute_matrix/{region_type}/{chip}/{scaled}/group_vs_group/sort_order_matrix_{group1}_vs_{group2}.mat.gz"
    rule compute_sort_order_matrix_group_vs_group:
        input:
            bigwig = "{prefix}/data/bigwigcompare/group_{group1}_vs_group_{group2}.bigwig",
            bed = get_bed_regions
        output:
            matrix = sort_order_matrix_group_vs_group
        threads: 48
        params:
            subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
            options = options
        shell:
            computematrix_cmd


    rule compute_matrix_group_vs_group:
        input:
            bigwig = "{prefix}/data/bigwigcompare/group_{group1}_vs_group_{group2}.bigwig",
            # the bed decides sort order
            bed = "{{prefix}}/data/heatmap/{{region_type}}/{{chip}}/scale_regions/group_vs_group/{group1}_vs_{group2}_sort_order.bed".format(group1=first_group, group2=more_than_one_group)
        output:
            matrix = "{prefix}/data/compute_matrix/{region_type}/{chip}/{scaled}/group_vs_group/{group1}_vs_{group2}.mat.gz"
        threads: 48
        params:
            subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
            options = options,
            sort_order_matrix = sort_order_matrix_group_vs_group
        run:
            # if the sort order matrix exists, avoid recomputation
            # doing it this way to avoid 1) DAG hacks (ruleorder etc) 2) recomputation (expensive!)
            if wildcards.group1 == first_group and wildcards.group2 == more_than_one_group:
                sort_order_matrix = params.sort_order_matrix.format(**wildcards)
                shell("cp {sort_order_matrix} {output.matrix}")
            else:
                shell(computematrix_cmd)
