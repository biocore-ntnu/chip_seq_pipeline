def group_bigwigs(w, group=None):

    group = group if group else w.group

    df = sample_sheet

    if w.chip == "log2ratio":
        names = sorted(list(set(df.loc[(df.Group == group) & (df.ChIP == "ChIP")].Name)))
        return expand("{prefix}/data/bigwigcompare/sample_{sample}_vs_merged_input.bw", sample=names, prefix=w.prefix)

    elif w.chip == "input":

        names = sorted(list(set(df.loc[(df.Group == group) & (df.ChIP == "Input")].Name)))
        return expand("{prefix}/data/bamcoverage/{sample}.bw", sample=names, prefix=w.prefix)

    elif w.chip == "chip":

        names = sorted(list(set(df.loc[(df.Group == group) & (df.ChIP == "ChIP")].Name)))
        return expand("{prefix}/data/bamcoverage/{sample}.bw", sample=names, prefix=w.prefix)


def options(w):
    opts = []
    region_labels = ""
    if w.scaled == "scale_regions":
        opts.append("--regionBodyLength 5000")
        region_labels = (r"--startLabel 3\'"
                         " "
                         r"--endLabel 5\'")
    elif w.scaled.lower() == "tss":
        opts.append("--referencePoint TSS")
    else:
        opts.append("--referencePoint TES")

    region_starts = ("--beforeRegionStartLength {dist} "
                     "--afterRegionStartLength {dist}")

    if "gene" in w.region_type:
        dist = config["tss_distance_gene"]
        opts.append(region_starts.format(dist=dist))
    else:
        dist = config["tss_distance_other"]
        opts.append(region_starts.format(dist=dist))
        opts.append(region_labels)

    return " ".join(opts)


def get_bed_regions(w):

    annotation_exists = config.get("annotation_gff3", "")

    custom_regions = config["custom_regions"] or []

    if w.region_type not in custom_regions and annotation_exists:
        return "{prefix}/data/compute_tss/{region_type}/annotation_no_duplicate_tss.bed".format(region_type=w.region_type, prefix=w.prefix)
    elif w.region_type not in custom_regions:
        return "{prefix}/data/annotation/refgene/{region_type}.bed".format(**w)
    else:
        custom_regions = config["custom_regions"][w.region_type]
        return custom_regions


#############################
# samples alone or vs input #
#############################


computematrix_base = ("computeMatrix {params.subcommand} -p {threads}  "
                      "{params.options} "
                      "-R {input.bed} -S {input.bigwig} -out {output.matrix}")

computematrix = computematrix_base + " --sortRegions descend"

computematrix_sort_order = computematrix_base + " --sortRegions descend --sortUsing median --outFileSortedRegions {output.bed}"

computematrix_other_matrixes = computematrix_base + " --sortRegions keep"

if config["sort_order_group"]:

    sort_order_group = config["sort_order_group"]

    # Need this hack to compute the sort order first
    ruleorder: compute_sort_order_matrix > compute_other_matrixes

    rule compute_sort_order_matrix:
        input:
            bigwig = lambda w: group_bigwigs(w, sort_order_group),
            bed = get_bed_regions
        output:
            matrix = "{{prefix}}/data/compute_matrix/{{region_type}}/{{chip}}/{{scaled}}/{group}.mat.gz".format(group=sort_order_group),
            bed = "{{prefix}}/data/compute_matrix/{{region_type}}/{{chip}}/{{scaled}}/{group}.bed".format(group=sort_order_group)
        threads: 48
        params:
            subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
            options = options,
        shell:
            computematrix_sort_order

    rule compute_other_matrixes:
        input:
            bigwig = group_bigwigs,
            bed = "{{prefix}}/data/compute_matrix/{{region_type}}/{{chip}}/{{scaled}}/{group}.bed".format(group=sort_order_group)
        output:
            matrix = "{prefix}/data/compute_matrix/{region_type}/{chip}/{scaled}/{group}.mat.gz"
        threads: 48
        params:
            subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
            options = options,
        shell:
            computematrix_other_matrixes

else:

    rule compute_matrix:
        input:
            bigwig = group_bigwigs,
            bed = get_bed_regions
        output:
            matrix = "{prefix}/data/compute_matrix/{region_type}/{chip}/{scaled}/{group}.mat.gz",
        threads: 48
        params:
            subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
            options = options,
        shell:
            computematrix


#############################
# input-norm group vs group #
#############################


if config["sort_order_group"] and config["second_sort_order_group"] and more_than_one_group:

    sort_order_group = group1[0]
    second_sort_order_group = group2[0]

    # Need this hack to compute the sort order first
    ruleorder: compute_sort_order_matrix_group_vs_group > compute_other_matrixes_group_vs_group

    rule compute_sort_order_matrix_group_vs_group:
        input:
            bigwig = "{{prefix}}/data/bigwigcompare/group_{group1}_vs_group_{group2}.bigwig".format(group1=sort_order_group, group2=second_sort_order_group),
            bed = get_bed_regions
        output:
            matrix = "{{prefix}}/data/compute_matrix/{{region_type}}/{{chip}}/{{scaled}}/group_vs_group/sort_order_matrix_{group1}_vs_{group2}.mat.gz".format(group1=sort_order_group, group2=second_sort_order_group),
            bed = "{{prefix}}/data/compute_matrix/{{region_type}}/{{chip}}/{{scaled}}/group_vs_group/{group1}_vs_{group2}.bed".format(group1=sort_order_group, group2=second_sort_order_group)
        threads: 48
        params:
            subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
            options = options,
        shell:
            computematrix_sort_order

    rule compute_other_matrixes_group_vs_group:
        input:
            bigwig = "{prefix}/data/bigwigcompare/group_{group1}_vs_group_{group2}.bigwig",
            bed = "{{prefix}}/data/compute_matrix/{{region_type}}/{{chip}}/{{scaled}}/group_vs_group/{group1}_vs_{group2}.bed".format(group1=sort_order_group, group2=second_sort_order_group)
        output:
            matrix = "{prefix}/data/compute_matrix/{region_type}/{chip}/{scaled}/group_vs_group/{group1}_vs_{group2}.mat.gz"
        threads: 48
        params:
            subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
            options = options,
        shell:
            computematrix_other_matrixes

elif not config["second_sort_order_group"] and more_than_one_group:

    rule compute_matrix_group_vs_group:
        input:
            bigwig = "{prefix}/data/bigwigcompare/group_{group1}_vs_group_{group2}.bigwig",
            bed = get_bed_regions
        output:
            matrix = "{prefix}/data/compute_matrix/{region_type}/{chip}/{scaled}/group_vs_group/{group1}_vs_{group2}.mat.gz",
        threads: 48
        params:
            subcommand = lambda w: "scale-regions" if w.scaled == "scale_regions" else "reference-point",
            options = options,
        shell:
            computematrix
