from natsort import natsorted


if config.get("annotation_gff3", ""):

    rule merge_gencode_genes_exons:
        input:
            gene = "{prefix}/data/compute_tss/gene/annotation_no_duplicate_tss.bed",
            exon = "{prefix}/data/compute_tss/exon/annotation_no_duplicate_tss.bed"
        output:
            "{prefix}/data/gene_barcharts/merged.bed"
        run:
            gene = pd.read_table(input.gene, sep="\t", header=None)
            exon = pd.read_table(input.exon, sep="\t", header=None)

            print(gene.head())
            gene = gene.drop(4, axis=1)
            exon = exon.drop(4, axis=1)

            print(gene.head())

            names = "Chromosome Start End Name Strand Gene Type".split()

            gene.insert(6, "Type", "gene")
            exon.insert(6, "Type", "exon")
            exon.Type = "exon"

            gene.columns = names
            exon.columns = names

            print(gene.head())

            df = pd.concat([gene, exon])

            names_order = "Chromosome Start End Type Strand Gene Name".split()
            df[names_order].to_csv(output[0], sep="\t", index=False, header=False)

else:

    rule merge_ucsc_genes_exons:
        input:
            "{prefix}/data/annotation/refgene/gene.bed",
            "{prefix}/data/annotation/refgene/exon.bed"
        output:
            "{prefix}/data/gene_barcharts/merged.bed"
        shell:
            "cat <(tail -n +2 {input[0]}) <(tail -n +2 {input[1]}) > {output[0]}"


rule add_tss:
    input:
        "{prefix}/data/gene_barcharts/merged.bed"
    output:
        "{prefix}/data/gene_barcharts/merged_with_tss.bed"
    run:

        names = "Chromosome Start End Type Strand Gene Name".split()
        df = pd.read_table(input[0], sep="\t", header=None, names=names)

        tss_pos = df.loc[(df.Strand == "+") & (df.Type == "gene")]

        tss_neg = df.loc[(df.Strand == "-") & (df.Type == "gene")]
        tss_neg.loc[:, "Start"] = tss_neg.End

        tss = pd.concat([tss_pos, tss_neg])
        tss.loc[:, "End"] = tss.Start
        tss.loc[:, "Type"] = "tss"

        tes_pos = df.loc[(df.Strand == "+") & (df.Type == "gene")]
        tes_pos.loc[:, "Start"] = tes_pos.End

        tes_neg = df.loc[(df.Strand == "-") & (df.Type == "gene")]

        tes = pd.concat([tes_pos, tes_neg])
        tes.loc[:,"Type"] = "tes"
        tes.loc[:, "End"] = tes.Start

        tes.loc[:, "End"] = tes.Start + config["barchart_tss_length"]
        tes.loc[:, "Start"] = tes.Start - config["barchart_tss_length"]

        tss.loc[:, "End"] = tss.Start + config["barchart_tss_length"]
        tss.loc[:, "Start"] = tss.Start - config["barchart_tss_length"]

        outdf = pd.concat([df, tss, tes])
        outdf = outdf.sort_values("Chromosome")
        outdf.to_csv(output[0], sep="\t", index=False)


rule create_intervaltrees:
    input:
        "{prefix}/data/gene_barcharts/merged_with_tss.bed"
    output:
        "{prefix}/data/gene_barcharts/intervals.pickle"
    script:
        "../../scripts/create_intervaltrees.py"


rule gene_overlap_barcharts_data:
    input:
        intervals = "{prefix}/data/gene_barcharts/intervals.pickle",
        peaks = "{prefix}/data/peaks/{caller}/{group}.csv"
    output:
        "{prefix}/data/gene_barcharts/{caller}/{group}.csv"
    params:
        label = lambda w: w.group
    script:
        "../../scripts/find_peak_gene_overlaps.py"


rule collect_gene_overlap_data:
    input:
        expand("{{prefix}}/data/gene_barcharts/{{cs_caller}}/{group}.csv", group=natsorted(ss.Group.drop_duplicates()))
    output:
        "{prefix}/data/gene_barcharts/{cs_caller}/merged_group.csv"
    run:
        dfs = [pd.read_table(f, sep=" ", header=0, index_col=None) for f in input]
        df = pd.concat(dfs)
        df.to_csv(output[0], sep=" ")


rule graph_gene_overlap_barcharts:
    input:
        "{prefix}/data/gene_barcharts/{cs_caller}/merged_group.csv"
    output:
        "{prefix}/data/gene_barcharts/{cs_caller}_gene_overlap_barchart.png"
    script:
        "../../scripts/barchart.R"
