import pandas as pd

from utils.helpers import merge_colnames_sample_sheet

rule average_per_group_input:
    input:
        e_vals = "{prefix}/data/voom/{caller}.e_values",
        cluster = "{prefix}/data/epic_cluster/{caller}_cluster.csv.gz"
    output:
        "{prefix}/data/normalize/averaged_input_{caller}.e_values"
    run:
        df = pd.read_table(input.e_vals, sep=" ", header=0, index_col=0)
        names = pd.read_table(input.cluster, header=0, nrows=0, index_col=0, sep=" ")
        df.columns = names.columns
        col_map = merge_colnames_sample_sheet(df.columns, ss)

        # make input cols per group the same
        mean_input_cols = []
        for g in col_map.Group.drop_duplicates():
            cols = col_map.loc[(col_map.Group == g) & (col_map.ChIP == "Input")].FullName.drop_duplicates()

            colnames = iter(cols)
            input_col = pd.Series(df[cols].median(1), name=next(colnames))
            mean_input_cols.append(input_col)
            for f in range(len(cols) - 1):
                mean_input_cols.append(pd.Series(input_col.copy(), name=next(colnames)))

        avg_input_df = pd.concat(mean_input_cols, axis=1)
        chip_df = df[col_map.loc[col_map.ChIP == "ChIP"].FullName.drop_duplicates()]

        outdf = pd.concat([chip_df, avg_input_df], axis=1)[names.columns]

        outdf.to_csv(output[0], sep=" ")
