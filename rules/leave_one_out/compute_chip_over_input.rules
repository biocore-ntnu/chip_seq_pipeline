import pandas as pd

from utils.helpers import merge_colnames_sample_sheet

rule get_chip_over_input_from_files_left_in:
    input:
        toptable = "{prefix}/data/limma/loo/{group}_{caller}_{contrast}_cutoff.toptable",
        cluster = "{prefix}/data/epic_cluster/loo/{group}_{caller}_cluster.csv.gz"
    output:
        "{prefix}/data/loo/chip_over_input/{group}_{caller}_{contrast}.ratios"
    run:
        toptable = pd.read_table(input.toptable, sep=" ", index_col=0)
        cluster = pd.read_table(input.cluster, sep=" ", index_col=0)

        toptable_cluster = cluster.ix[toptable.index]

        # This code just connects Filenames and Chip/input status
        m = merge_colnames_sample_sheet(toptable_cluster.columns, ss)["FullName ChIP"]

        chip_files = m.loc[m.ChIP == "ChIP"].FullName
        input_files = m.loc[m.ChIP == "Input"].FullName

        # row counts
        chip_counts = cluster[chip_files].sum(axis=1)
        input_counts = cluster[input_files].sum(axis=1) + 0.5

        chip_counts.div(input_counts, axis=0).to_csv(output[0], sep=" ")


def compute_bins(df, bin_size):
    bins = []

    for chromosome, start, end in zip(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2]):
        start, end = int(start), int(end)
        for chromosome_bin in range(start - start % bin_size, end - end % bin_size + bin_size, bin_size):
            d = {"Chromosome": chromosome, "Bin": chromosome_bin}
            bins.append(d)

    bins = pd.DataFrame.from_dict(bins).set_index(["Chromosome", "Bin"])

    return bins


rule get_chip_over_input_from_file_left_out:
    input:
        toptable = "{prefix}/data/limma/loo/{group}_{caller}_{contrast}_cutoff.toptable",
        matrix = "{prefix}/data/epic/{group}.matrix.gz"
    output:
        "{prefix}/data/chip_over_input/loo/{group}_{caller}_{contrast}.counts"
    run:
        df = pd.read_table(input.toptable, sep=" ", nrows=5)
        if df.empty:
            idx = pd.Series(["chr1_0_0:200_trunk"])
            value = pd.Series([0.0001])
            outdf = pd.concat([idx, value], 1)
        else:
            df = df.index.get_level_values(0).to_series().str.split("_|:", expand=True)
            bins = compute_bins(df, 200)
            print(bins)
