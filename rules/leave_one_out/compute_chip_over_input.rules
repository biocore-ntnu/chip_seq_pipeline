import pandas as pd

from utils.helpers import merge_colnames_sample_sheet

rule get_chip_over_input:
    input:
        toptable = "{prefix}/data/limma/loo/{logfc}_{group}_{caller}_{contrast}_cutoff.toptable",
        e_values = "{prefix}/data/normalize/averaged_input_{caller}.e_values"
    output:
        "{prefix}/data/loo/chip_over_input/{logfc}_{group}_{caller}_{contrast}.ratios"
    run:
        toptable = pd.read_table(input.toptable, sep=" ", index_col=0)
        e_values = pd.read_table(input.e_values, sep=" ", index_col=0)

        toptable_e_values = e_values.ix[toptable.index]

        # This code just connects Filenames and ChIP/Input status
        m = merge_colnames_sample_sheet(e_values.columns, ss)["FullName ChIP Group".split()]

        chip_files = m.loc[m.ChIP == "ChIP"]["FullName Group".split()].drop_duplicates()
        input_files = m.loc[m.ChIP == "Input"]["FullName Group".split()].drop_duplicates()

        # print(chip_files.Group.reset_index(), input_files.Group.reset_index())
        assert chip_files.Group.reset_index(drop=True).equals(input_files.Group.reset_index(drop=True))
        chip_files = chip_files.drop("Group", axis=1)
        input_files = input_files.drop("Group", axis=1)

        chip_e = toptable_e_values[chip_files.FullName]
        input_e = toptable_e_values[input_files.FullName]

        outdf = chip_e - input_e.values
        outdf.to_csv(output[0], sep=" ")
