
import pyranges as pr

# rule remove_all_but_one_transcript_per_gene:
#     input:
#         "{prefix}/data/annotation/annotation.bed"
#     output:
#         "{prefix}/data/annotation/one_transcript_per_gene.bed"
#     script:
#         "../../scripts/remove_all_but_one_transcript_per_gene.py"



# rule remove_duplicate_tss_genes:
#     input:
#         "{prefix}/data/annotation/one_transcript_per_gene.bed"
#     output:
#         "{prefix}/data/annotation/no_duplicate_tss.bed"
#     script:
#         "../../scripts/remove_duplicate_tss.py"






rule extract_correct_gene_type:
    input:
        "{prefix}/data/annotation/no_duplicate_tss.bed"
    output:
        "{prefix}/data/annotation/{gene_type}.bed"
    wildcard_constraints:
        gene_type = "(gene|exon)"
    script:
        "../../scripts/extract_correct_gene_type.py"


rule create_tss:
    input:
        config["annotation_gff3"]
    output:
        "{prefix}/data/annotation/TSS.bed"
    run:
        print("read gtf")
        gr = pr.read_gtf(input[0], nrows=None)

        print("filter")
        gr = gr.ft.filter_transcripts(keep="most_exons")
        print("compute tss")
        tss = gr.ft.tss(slack=1000)

        tss.df.insert(3, "Name", tss.GeneID)
        tss.df.insert(4, "Score", 0)
        print(tss)
        tss.df = tss.df.drop(["TranscriptID", "GeneID", "Feature"], 1)
        print(tss)

        tss.df.to_csv(output[0], sep="\t", header=False, index=False)









rule compute_internal_exons:
    input:
        "{prefix}/data/annotation/exon.bed"
    output:
        "{prefix}/data/annotation/internal_exon.bed"
    script:
        "../../scripts/compute_internal_exons.py"


rule bed_for_compute_matrix:
    input:
        "{prefix}/data/annotation/{region_type}.bed"
    output:
        "{prefix}/data/annotation/{region_type}_computematrix.bed"
    shell:
        r"tail -n +2 {input[0]} | sed 's/\b{wildcards.region_type}\b/0/' > {output[0]}"
